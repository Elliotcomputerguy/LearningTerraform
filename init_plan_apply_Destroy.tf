/*
Terraform init:
When you create a new configuration â€” or check out an existing configuration from version control
you need to initialize the directory with terraform init.
Initializing a configuration directory downloads and installs the providers defined in the configuration.
Terraform downloads the provider and installs it in a hidden subdirectory of your current working directory, 
named .terraform. The terraform init command prints out which version of the provider was installed. 
Terraform also creates a lock file named .terraform.lock.hcl which specifies the exact provider versions used, 
so that you can control when you want to update the providers used for your project.

Terraform plan:
Before you can create infrastructure, Terraform needs to generate an execution plan.
The terraform plan prints the execution plan for your configuration.
The execution plan specifies what actions Terraform will take to achieve the desired state defined in the configuration. It is also
printed in the apply command.

Terraform apply:
Before it applies any changes, Terraform prints out the execution plan which describes the actions Terraform will take in order 
to change your infrastructure to match the configuration. The output format is similar to the diff format generated by tools 
such as Git. Where the output has a '+', means that Terraform will create this resource. Beneath that, 
it shows the attributes that will be set. When the value displayed is (known after apply), it means that the value won't be known 
until the resource is created. For instance, AWS assigns ARNs to instances when they are created, so Terraform cannot know the 
value of the arn attribute until you apply the change and the AWS provider returns that value from the AWS API.
Terraform will now pause and wait for your approval before proceeding. If anything in the plan seems incorrect or dangerous, 
it is safe to abort here with no changes made to your infrastructure. To proceed you have to type yes. You can how ever run an
apply with --auto-approve appended to bypass and instantly build.

Terraform destroy:
terraform destroy removes infrastructure from your deployed enviroment.
The - prefix indicates that the instance will be destroyed. As with apply, Terraform shows its execution plan and waits for 
approval before making any changes. Just like with apply, Terraform determines the order in which things must be destroyed. 
In more complicated cases with multiple resources, Terraform will destroy them in a suitable order to respect dependencies
*/